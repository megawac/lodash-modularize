#!/usr/bin/env node

var argv = require('yargs')
  .usage('Usage: $0 <input> [options]')
  .example('$0 src/**.js --format amd -o src/lodash.js --lodash-path bower/lodash', 'Generate a UMD build for source files')
  .example('$0 src/**.js -g _ --exports es6', 'Generate a UMD build for source files')
  .example('$0 src/**.js --list', 'List the used lodash functions')
  .demand(1)

  .option('output', {
    default: null,
    alias: 'o',
    describe: 'file to generate'
  })
  .nargs('output', 1)
  
  .option('update', {
    alias: 'u',
    type: 'boolean',
    describe: 'Update the files using lodash to use the built file'
  })
  .implies('update', 'output')

  .option('production', {
    type: 'boolean',
    describe: 'Generate an optimized & minified build'
  })
  .implies('production', 'output')

  .option('format', {
    default: ['cjs', 'es6'],
    alias: 'f',
    describe: 'modular format to export (es6,amd,cjs)'
  })
  .nargs('format', 1)

  .option('exports', {
    default: 'umd',
    alias: 'export',
    describe: 'module format to export (es6,umd,cjs,amd)'
  })

  .option('lodash', {
    default: 'lodash',
    describe: 'The path to search and use for lodash (e.g. lodash-compat)'
  })

  .option('lodash-path', {
    default: null,
    describe: 'Lodash base path (useful for AMD)'
  })

  .option('global', {
    default: null,
    alias: 'g',
    describe: 'Global lodash variable (e.g. _ or lodash)'
  })
  .nargs('g', 1)

  .option('compile', {
    alias: ['c'],
    describe: 'Whether to compile the results like lodash cli',
    type: 'boolean'
  })

  .boolean('list')
  .describe('list', 'List the use lodash modules instead of building a file')
  
  .version(function() {
    return require('../package').version;
  })
  .argv;

// I want it all
require('bluebird').longStackTraces();
var modularize = require('..');

argv.lodashPath = argv.lodashPath || argv.lodash;

// Work around yargs not doing it for us
argv.format = argv.f = argv.f.join(',').split(',');

modularize(argv._, argv)
  .then(function(result) {
    if (argv.list) {
      console.log(result.join(',').bold);
      return;
    } else if (!argv.output) {
      console.log(result);
    }
  })
  .catch(function(error) {
    // process.exit(1) after the error is outputted
    setTimeout(process.exit, 100, 1);
    throw error;
  });

