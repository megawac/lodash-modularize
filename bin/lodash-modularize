#!/usr/bin/env node

var defaults = require('../defaults.json');
var screenWidth = require('window-size').width;

var argv = require('yargs')
  .usage('Usage: $0 <input> [options]')
  .example('$0 src/**.js --format amd -o src/lodash.js --lodash-path bower/lodash', 'Generate a UMD build for source files')
  .example('$0 src/**.js -g _ --exports es6', 'Generate a UMD build for source files')
  .example('$0 src/**.js --list', 'List the used lodash functions')
  .demand(1)

  .option('output', {
    default: defaults.output,
    alias: 'o',
    describe: 'file to generate'
  })
  .nargs('output', 1)
  
  .option('update', {
    alias: 'u',
    type: 'boolean',
    describe: 'Update the files using lodash to use the built file'
  })
  .implies('update', 'output')

  .option('production', {
    type: 'boolean',
    describe: 'Generate an optimized & minified build'
  })
  .implies('production', 'output')
  .implies('production', 'compile')

  .option('format', {
    default: defaults.format,
    alias: 'f',
    describe: 'modular format to export (es6,amd,cjs)'
  })
  .nargs('format', 1)

  .option('exports', {
    default: defaults.exports,
    alias: 'export',
    describe: 'module format to export (umd,es6,cjs,amd)'
  })
  .option('es6', {
    describe: 'Set to es6 export',
    type: 'boolean'
  })
  .option('amd', {
    describe: 'Set to amd export',
    type: 'boolean'
  })
  .option('cjs', {
    describe: 'Set to cjs export',
    type: 'boolean'
  })

  .option('lodash', {
    default: defaults.lodash,
    describe: 'The path to search and use for lodash (e.g. lodash-compat)'
  })

  .option('lodash-path', {
    default: defaults.lodashPath,
    describe: 'Lodash base path (useful for AMD)'
  })

  .option('use-npm-modules', {
    describe: 'Whether to use (smaller) npm lodash modules (see docs)',
    type: 'boolean',
    alias: ['n']
  })
  .implies('use-npm-modules', 'output')

  .option('global', {
    default: defaults.global,
    alias: 'g',
    describe: 'Global lodash variable (e.g. _ or lodash)'
  })
  .nargs('g', 1)

  .option('compile', {
    alias: ['c'],
    describe: 'Whether to compile the results like lodash cli',
    type: 'boolean'
  })

  .boolean('list')
  .describe('list', 'List the use lodash modules instead of building a file')
  
  .version(function() {
    return require('../package').version;
  })
  .wrap(Math.min(screenWidth, 120))
  .argv;

// I want it all
require('bluebird').longStackTraces();
var modularize = require('..');
var inquirer = require('inquirer');

// Work around yargs not doing it for us
if (typeof argv.f === 'string') {
  argv.format = argv.f = argv.f.split(',');
}

if (!argv.lodashPath) {
  argv.lodashPath = typeof argv.lodash === 'string' ?
                    argv.lodash :
                    argv.lodash[0];
}

if (argv.es6) {
  argv.exports = 'es6';
} else if (argv.amd) {
  argv.exports = 'amd';
} else if (argv.cjs) {
  argv.exports = 'cjs';
}
argv.export = argv.exports;

modularize(argv._, argv)
  .then(function(result) {
    if (argv.list) {
      console.log(result.join(',').bold);
    } else if (!argv.output) {
      console.log(result.code);
    } else if (argv.useNpmModules) {
      function save() {
        require('npm').load(function(cfg, npm) {
          var methods = result.methods.map(function(method) {
            return 'lodash.' + method.toLowerCase();
          });
          console.log(methods);
          npm.install(methods);
        });
      }

      if (argv.installNpmModules) {
        return save();
      }
      inquirer.prompt([{
        type: "confirm",
        message: "Install the appropriate npm modules now?",
        name: "install",
        default: false
      }], function(opts) {
        if (opts.install) {
          save();
        }
      });
    }
  })
  .catch(function(error) {
    // process.exit(1) after the error is outputted
    setTimeout(process.exit, 100, 1);
    throw error;
  });

